/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Helper.*;
import Model.Appointment;
import Model.Clinic;
import Model.Hasta;
import Model.Whours;
import static View.BashekimGUI.bashekim;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class HastaGUI extends javax.swing.JFrame {

    private Appointment app = new Appointment();
    private static Hasta hasta = new Hasta();
    private DefaultTableModel doctorModel = null;
    private Object[] doctorData = null;
    private Clinic clinic = new Clinic();
    private Whours whours = new Whours();
    private DefaultTableModel whoursModel = null;
    private Object[] whoursData = null;

    public HastaGUI(Hasta hasta) throws SQLException {
        initComponents();

        Image icon = new ImageIcon(this.getClass().getResource("/icons/Hospital32.png")).getImage();
        this.setIconImage(icon);
        table_doctor.setDefaultEditor(Object.class, null);
        table_appointment.setDefaultEditor(Object.class, null);

        jLabel1.setText("Hoşgeldiniz, Sayın " + hasta.getName());
        // Doctor Model
        doctorModel = new DefaultTableModel();
        Object[] colDoctor = new Object[2];
        colDoctor[0] = "ID";
        colDoctor[1] = "Ad Soyad";
        doctorModel.setColumnIdentifiers(colDoctor);
        doctorData = new Object[2];

        // Whours Model
        whoursModel = new DefaultTableModel();
        Object[] colWhours = new Object[2];
        colWhours[0] = "ID";
        colWhours[1] = "Tarih";
        whoursModel.setColumnIdentifiers(colWhours);
        whoursData = new Object[2];

        for (int i = 0; i < clinic.getList().size(); i++) {
            select_pol.addItem(new Item(clinic.getList().get(i).getId(), clinic.getList().get(i).getName()));

        }

        select_pol.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (select_pol.getSelectedIndex() != 0) {
                    JComboBox c = (JComboBox) e.getSource();
                    Item item = (Item) c.getSelectedItem();
                    DefaultTableModel clearModel = (DefaultTableModel) table_doctor.getModel();
                    clearModel.setRowCount(0);
                    try {
                        for (int i = 0; i < clinic.getClinicDoktorList(item.getKey()).size(); i++) {
                            doctorData[0] = clinic.getClinicDoktorList(item.getKey()).get(i).getId();
                            doctorData[1] = clinic.getClinicDoktorList(item.getKey()).get(i).getName();
                            clearModel.addRow(doctorData);

                        }

                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                } else {
                    DefaultTableModel clearModel = (DefaultTableModel) table_doctor.getModel();
                    clearModel.setRowCount(0);
                }
            }
        });
        table_doctor.setModel(doctorModel);

    }

    public void updateWhoursModel(int doctor_id) throws SQLException {
        DefaultTableModel updatedTable = (DefaultTableModel) table_appointment.getModel();
        updatedTable.setRowCount(0);
        int selRow = table_doctor.getSelectedRow();
        String selDoctor = table_doctor.getModel().getValueAt(selRow, 0).toString();
        int selDoctorID = Integer.parseInt(selDoctor);
         for (int i = 0; i < whours.getWhoursList(selDoctorID).size(); i++) {
                    whoursData[0] = whours.getWhoursList(selDoctorID).get(i).getId();
                    whoursData[1] = whours.getWhoursList(selDoctorID).get(i).getWdate();
                    whoursModel.addRow(whoursData);
                }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cıkısyap = new javax.swing.JButton();
        w_panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        w_tabpane = new javax.swing.JTabbedPane();
        w_hastaPane = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_doctor = new javax.swing.JTable(doctorModel);
        jScrollPane3 = new javax.swing.JScrollPane();
        table_appointment = new javax.swing.JTable(whoursModel);
        label_pol = new javax.swing.JLabel();
        label_doctor = new javax.swing.JLabel();
        select_pol = new javax.swing.JComboBox();
        pol_error = new javax.swing.JLabel();
        doctor_error = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cıkısyap.setBackground(new java.awt.Color(100, 169, 68));
        cıkısyap.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 16)); // NOI18N
        cıkısyap.setForeground(new java.awt.Color(255, 255, 255));
        cıkısyap.setText("Çıkış Yap");
        cıkısyap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cıkısyapActionPerformed(evt);
            }
        });
        getContentPane().add(cıkısyap, new org.netbeans.lib.awtextra.AbsoluteConstraints(516, 10, 160, 30));

        w_panel.setBackground(new java.awt.Color(255, 255, 255));
        w_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(100, 169, 68));
        jLabel1.setText("Hoşgeldiniz");
        w_panel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 10, 270, 30));

        w_tabpane.setBackground(new java.awt.Color(255, 255, 255));
        w_tabpane.setForeground(new java.awt.Color(100, 169, 68));
        w_tabpane.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N

        w_hastaPane.setBackground(new java.awt.Color(255, 255, 255));
        w_hastaPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 169, 68), 0));
        w_hastaPane.setForeground(new java.awt.Color(100, 169, 68));
        w_hastaPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 169, 68)));
        jScrollPane2.setForeground(new java.awt.Color(0, 0, 0));
        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        table_doctor.setBackground(new java.awt.Color(0, 102, 102));
        table_doctor.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        table_doctor.setForeground(new java.awt.Color(0, 0, 0));
        table_doctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "ID", "Alan Doktoru"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_doctor.setGridColor(new java.awt.Color(153, 153, 0));
        table_doctor.setSelectionBackground(new java.awt.Color(153, 153, 0));
        table_doctor.setSelectionForeground(new java.awt.Color(255, 255, 255));
        table_doctor.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_doctor.setShowGrid(false);
        table_doctor.getTableHeader().setResizingAllowed(false);
        table_doctor.getTableHeader().setReorderingAllowed(false);
        table_doctor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_doctorMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table_doctor);

        w_hastaPane.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 250, 400));

        jScrollPane3.setBackground(new java.awt.Color(0, 102, 102));
        jScrollPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 169, 68)));
        jScrollPane3.setForeground(new java.awt.Color(0, 0, 0));

        table_appointment.setBackground(new java.awt.Color(0, 102, 102));
        table_appointment.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        table_appointment.setForeground(new java.awt.Color(0, 0, 0));
        table_appointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Tarih"
            }
        ));
        table_appointment.getTableHeader().setResizingAllowed(false);
        table_appointment.getTableHeader().setReorderingAllowed(false);
        table_appointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_appointmentMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(table_appointment);

        w_hastaPane.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 250, 400));

        label_pol.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        label_pol.setForeground(new java.awt.Color(100, 169, 68));
        label_pol.setText("Poliklinik Adı");
        w_hastaPane.add(label_pol, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 140, 30));

        label_doctor.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        label_doctor.setForeground(new java.awt.Color(100, 169, 68));
        label_doctor.setText("Randevu oluştur");
        w_hastaPane.add(label_doctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 140, 30));

        select_pol.setBackground(new java.awt.Color(255, 255, 255));
        select_pol.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        select_pol.setForeground(new java.awt.Color(0, 0, 0));
        select_pol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        select_pol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_polActionPerformed(evt);
            }
        });
        w_hastaPane.add(select_pol, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 150, 30));

        pol_error.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        pol_error.setForeground(new java.awt.Color(255, 255, 255));
        pol_error.setText("Bu kısım boş bırakılamaz");
        w_hastaPane.add(pol_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 150, 20));

        doctor_error.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        doctor_error.setForeground(new java.awt.Color(255, 255, 255));
        doctor_error.setText("Bu kısım boş bırakılamaz");
        w_hastaPane.add(doctor_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 150, 20));

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(100, 169, 68));
        jLabel2.setText("(Seçilen tarihe randevu ayarlar)");
        w_hastaPane.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 150, 170, -1));

        jButton1.setBackground(new java.awt.Color(100, 169, 68));
        jButton1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 20)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Onayla");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        w_hastaPane.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 150, 50));

        w_tabpane.addTab("Randevu Sistemi", w_hastaPane);

        w_panel.add(w_tabpane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 700, 450));

        getContentPane().add(w_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 500));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cıkısyapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cıkısyapActionPerformed
        LogınGUI logınGUI = new LogınGUI();
        logınGUI.setVisible(true);
        dispose();
    }//GEN-LAST:event_cıkısyapActionPerformed

    private void table_doctorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_doctorMouseClicked
        int selRow = table_doctor.getSelectedRow();
        if (selRow >= 0) {
            String selDoctor = table_doctor.getModel().getValueAt(selRow, 0).toString();
            int selDoctorID = Integer.parseInt(selDoctor);
            DefaultTableModel clearModel = (DefaultTableModel) table_appointment.getModel();
            clearModel.setRowCount(0);
            try {
                for (int i = 0; i < whours.getWhoursList(selDoctorID).size(); i++) {
                    whoursData[0] = whours.getWhoursList(selDoctorID).get(i).getId();
                    whoursData[1] = whours.getWhoursList(selDoctorID).get(i).getWdate();
                    whoursModel.addRow(whoursData);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            table_appointment.setModel(whoursModel);
        }
    }//GEN-LAST:event_table_doctorMouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void select_polActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_polActionPerformed

    }//GEN-LAST:event_select_polActionPerformed

    private void table_appointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_appointmentMouseClicked
        // pol_fldID.setText(jTable2.getValueAt(jTable2.getSelectedRow(), 0).toString());
        //pol_labelID.setForeground(Color.WHITE);

        /*  JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int column = source.columnAtPoint(evt.getPoint());
         String s=source.getModel().getValueAt(row, column)+"";
         System.out.println(s);*/
 /* int selRow = table_doctor.getSelectedRow();
        if (selRow >= 0) {
            String selDoctor = table_doctor.getModel().getValueAt(selRow, 0).toString();
            int selDoctorID = Integer.parseInt(selDoctor);
            DefaultTableModel clearModel = (DefaultTableModel) table_appointment.getModel();
            clearModel.setRowCount(0);
            try {
                for (int i = 0; i < whours.getWhoursList(selDoctorID).size(); i++) {
                    whoursData[0] = whours.getWhoursList(selDoctorID).get(i).getId();
                    whoursData[1] = whours.getWhoursList(selDoctorID).get(i).getWdate();
                    whoursModel.addRow(whoursData);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            table_appointment.setModel(whoursModel);
        }*/
        doctor_error.setForeground(Color.WHITE);
    }//GEN-LAST:event_table_appointmentMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (table_appointment.getSelectedRowCount() == 0) {
            doctor_error.setForeground(Color.red);
        } else {
            int selRow = table_appointment.getSelectedRow();
            int selDoc = table_doctor.getSelectedRow();
            String date = table_appointment.getModel().getValueAt(selRow, 1).toString();
            try {
                boolean control = hasta.addAppointment((int) table_doctor.getModel().getValueAt(selDoc, 0), hasta.getId(), table_doctor.getModel().getValueAt(selDoc, 1).toString(), hasta.getName(), date);
                if (control) {
                    UIManager.put("OptionPane.okButtonText", "Tamam");
                    JOptionPane.showMessageDialog(rootPane, "Randevunuz Alındı", "Randevu Bilgi Sistemi", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource("/icons/Done.png")));
                    hasta.updateWhoursStatus((int) table_doctor.getModel().getValueAt(selDoc, 0), date);
                    updateWhoursModel((int) table_doctor.getModel().getValueAt(selDoc, 0));
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatLightLaf.setup();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new HastaGUI(hasta).setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(HastaGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cıkısyap;
    private javax.swing.JLabel doctor_error;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel label_doctor;
    private javax.swing.JLabel label_pol;
    private javax.swing.JLabel pol_error;
    private javax.swing.JComboBox select_pol;
    private javax.swing.JTable table_appointment;
    private javax.swing.JTable table_doctor;
    private javax.swing.JPanel w_hastaPane;
    private javax.swing.JPanel w_panel;
    private javax.swing.JTabbedPane w_tabpane;
    // End of variables declaration//GEN-END:variables
}
